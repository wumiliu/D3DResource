struct VSParticleIn
{
	float3 pos              : POSITION;         //position of the particle
	float3 vel              : NORMAL;           //velocity of the particle
	float  Timer : TIMER;            //timer for the particle
	uint   Type             : TYPE;             //particle type
};

struct VSParticleDrawOut
{
	float3 pos : POSITION;
	float4 color : COLOR0;
	float radius : RADIUS;
};

struct PSSceneIn
{
	float4 pos : SV_Position;
	float2 tex : TEXTURE0;
	float4 color : COLOR0;
};

cbuffer cb0
{
	float4x4 g_mWorldViewProj;
	float4x4 g_mInvView;
	float g_fGlobalTime;
	float g_fElapsedTime;
	float4 g_vFrameGravity;
	float g_fSecondsPerFirework = 1.0;
	int g_iNumEmber1s = 30;
	float g_fMaxEmber2s = 15.0;
};

VSParticleDrawOut VSScenemain(VSParticleIn input)
{
	VSParticleDrawOut output = (VSParticleDrawOut)0;

	//
	// Pass the point through
	//
	output.pos = input.pos;
	output.radius = 1.5;

	//  
	// calculate the color
	//
	if (input.Type == PT_LAUNCHER)
	{
		output.color = float4(1, 0.1, 0.1, 1);
		output.radius = 1.0;
	}
	else if (input.Type == PT_SHELL)
	{
		output.color = float4(0.1, 1, 1, 1);
		output.radius = 1.0;
	}
	else if (input.Type == PT_EMBER1)
	{
		output.color = float4(1, 1, 0.1, 1);
		output.color *= (input.Timer / P_EMBER1LIFE);
	}
	else if (input.Type == PT_EMBER2)
	{
		output.color = float4(1, 0.1, 1, 1);
	}
	else if (input.Type == PT_EMBER3)
	{
		output.color = float4(1, 0.1, 0.1, 1);
		output.color *= (input.Timer / P_EMBER3LIFE);
	}

	return output;
}